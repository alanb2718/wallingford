#lang s-exp rosette
;; unit tests for button and mouse handling for reactive things

(require rackunit rackunit/text-ui rosette/lib/roseunit)
(require "../core/wallingford.rkt")
(require "../applications/geothings.rkt")
(require "../reactive/reactive.rkt")
(require "../reactive/abstract-reactive-thing.rkt")

(provide mouse-tests)

(define (button-events)
  (test-case
   "test button event handling (just with reactive thing programatically, not with a viewer)"
   (define times '())
   (define (get-times) times)
   (define button-events-tester%
     (class reactive-thing%
       (inherit milliseconds button-going-down?)
       (super-new)
       (when (button-going-down?)
         (set! times (cons (list "button" (send this wally-evaluate (milliseconds))) times)))))
   (define r1 (new button-events-tester%))
   (send-thing r1 advance-time 50)
   (check equal? (send-syncd r1 milliseconds-syncd) 50)
   (check equal? (send-syncd r1 evaluate-syncd get-times) '())
   (send-thing r1 mouse-event 100 0  0 'going-down)
   (send-thing r1 mouse-event 110 0  0 'going-up)
   (send-thing r1 mouse-event 200 0  0 'going-down)
   (send-thing r1 advance-time 300)
   (check equal? (send-syncd r1 milliseconds-syncd) 300)
   (check equal? (send-syncd r1 evaluate-syncd get-times) '(("button" 200) ("button" 100)))
   ; test button event handling advancing to the same time as the button down
   (set! times '())
   (define r2 (new button-events-tester%))
   (send-thing r2 advance-time 50)
   (check equal? (send-syncd r2 milliseconds-syncd) 50)
   (check equal? (send-syncd r2 evaluate-syncd get-times) '())
   ; button down sent before advance time (but both to time 100)
   ; sending advance time first then button down doesn't work (system isn't clairvoyant)
   (send-thing r2 mouse-event 100 0  0 'going-down)
   (send-thing r2 advance-time 100)
   (check equal? (send-syncd r2 milliseconds-syncd) 100)
   (send-thing r2 mouse-event 110 0  0 'going-up)
   (check equal? (send-syncd r2 evaluate-syncd get-times) '(("button" 100)))
   (send-thing r2 advance-time 150)
   (check equal? (send-syncd r2 milliseconds-syncd) 150)
   (check equal? (send-syncd r2 evaluate-syncd get-times) '(("button" 100)))
   (send-thing r2 mouse-event 200 0  0 'going-down)
   (send-thing r2 advance-time 200)
   (check equal? (send-syncd r2 milliseconds-syncd) 200)
   (check equal? (send-syncd r2 evaluate-syncd get-times) '(("button" 200) ("button" 100)))
   (send-thing r2 advance-time 250)
   (check equal? (send-syncd r2 milliseconds-syncd) 250)
   (check equal? (send-syncd r2 evaluate-syncd get-times) '(("button" 200) ("button" 100)))))

(define (button-state)
  (test-case
   "test getting button state"
   (define (get-state r)
     (send-syncd r evaluate-syncd (lambda () (send r button-state))))
   (define (get-button-pressed? r)
     (send-syncd r evaluate-syncd (lambda () (send r button-pressed?))))
   (define r1 (new reactive-thing%))
   (send-thing r1 mouse-event   0 0 0 'up)
   (send-thing r1 mouse-event 100 0 0 'going-down)
   (send-thing r1 mouse-event 110 0 0 'down)
   (send-thing r1 mouse-event 120 0 0 'down)
   (send-thing r1 mouse-event 200 0 0 'going-up)
   (send-thing r1 mouse-event 210 0 0 'up)
   (check equal? (get-state r1) 'up)
   (check equal? (get-button-pressed? r1) #f)
   (send-thing r1 advance-time 50)
   (check equal? (get-state r1) 'up)
   (check equal? (get-button-pressed? r1) #f)
   (send-thing r1 advance-time 100)
   (check equal? (get-state r1) 'going-down)
   (check equal? (get-button-pressed? r1) #f)
   (send-thing r1 advance-time 101)
   (check equal? (get-state r1) 'down)
   (check equal? (get-button-pressed? r1) #t)
   (send-thing r1 advance-time 110)
   (check equal? (get-state r1) 'down)
   (check equal? (get-button-pressed? r1) #t)
   (send-thing r1 advance-time 150)
   (check equal? (get-state r1) 'down)
   (check equal? (get-button-pressed? r1) #t)
   (send-thing r1 advance-time 200)
   (check equal? (get-state r1) 'going-up)
   (check equal? (get-button-pressed? r1) #t)
   (send-thing r1 advance-time 201)
   (check equal? (get-state r1) 'up)
   (check equal? (get-button-pressed? r1) #f)
   (send-thing r1 advance-time 300)
   (check equal? (get-state r1) 'up)
   (check equal? (get-button-pressed? r1) #f)))

(define (mouse-position-no-presses)
  (test-case
   "test mouse position function and event pruning (just with reactive thing programatically, not with a viewer) - no button presses in this test"
   (define r1 (new reactive-thing%))
   (define (get-mp r)
     (send-syncd r evaluate-syncd (lambda () (send r mouse-position))))
   (define (get-events r)
     (send-syncd r evaluate-syncd (lambda () (send r get-mouse-events))))
   (check equal? (get-mp r1) (point 0 0))  ; default state before any events
   (send-thing r1 mouse-event  0 10 20 'up)
   (check equal? (get-mp r1) (point 10 20))
   (send-thing r1 mouse-event 10 10 30 'up)
   (send-thing r1 mouse-event 30 50 26 'up)
   (send-thing r1 mouse-event 60 80 55 'up)
   (check equal? (get-events r1) (list (mouse-event 60 (point 80 55) 'up)))  ; should just have most recent event
   (send-thing r1 advance-time 10)
   (check equal? (get-mp r1) (point 80 55))  ; should get last event even though time is 10
   ))

(define (mouse-position-with-presses)
  (test-case
   "test mouse position function and event pruning in combination with button presses"
   (define r1 (new reactive-thing%))
   (define (get-mp r)
     (send-syncd r evaluate-syncd (lambda () (send r mouse-position))))
   (define (get-events r)
     (send-syncd r evaluate-syncd (lambda () (send r get-mouse-events))))
   (send-thing r1 mouse-event   5 0   5 'up)
   (send-thing r1 mouse-event 100 0  20 'going-down)
   (send-thing r1 mouse-event 110 0  40 'down)
   (send-thing r1 mouse-event 120 0  60 'down)
   (send-thing r1 mouse-event 150 0  80 'down)
   (send-thing r1 mouse-event 200 0 100 'going-up)
   (send-thing r1 mouse-event 210 0 120 'up)
   (define e1 (mouse-event 5 (point 0 5) 'up))
   (define e2 (mouse-event 100 (point 0 20) 'going-down))
   (define e3 (mouse-event 150 (point 0 80) 'down))  ; don't need events for t=110 and t=120
   (define e4 (mouse-event 200 (point 0 100) 'going-up))
   (define e5 (mouse-event 210 (point 0 120) 'up))
   (check equal? (get-events r1) (list e5 e4 e3 e2 e1))
   (check equal? (get-mp r1) (point 0 5))  ; first event on the list is for t=5
   (send-thing r1 advance-time 10)
   (check equal? (get-events r1) (list e5 e4 e3 e2))
   (check equal? (get-mp r1) (point 0 20))
   (send-thing r1 advance-time 125)
   (check equal? (get-events r1) (list e5 e4 e3 e2))
   (check equal? (get-mp r1) (point 0 80))
   (send-thing r1 advance-time 150)
   (check equal? (get-events r1) (list e5 e4 e3))
   (check equal? (get-mp r1) (point 0 80))
   (send-thing r1 advance-time 200)
   (check equal? (get-events r1) (list e5 e4))
   (check equal? (get-mp r1) (point 0 100))
   (send-thing r1 advance-time 300)
   (check equal? (get-events r1) (list e5))
   (check equal? (get-mp r1) (point 0 120))
   ))

(define mouse-tests 
  (test-suite+
   "run tests for mouse and button handling"
   (button-events)
   (button-state)
   (mouse-position-no-presses)
   ;(mouse-position-with-presses)
   ))

(time (run-tests mouse-tests))
