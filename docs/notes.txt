Wallingford (Babelsberg edition)

Some sample programs in Babelsberg pseudo-code

x:=3;
y:=x;
always y=10;
/* should have x=3, y=10 */

p:=point(2,3);
q:=p;
always q=point(10,10);
/* should have p=point(2,3), q=point(10,10) */
/* p and q are instances of value classes */


p:=point(2,3);
q:=p;
always q.x=10;
/* should have p=point(2,3), q=point(10,3) */
/* this is assuming a suitable metric for the soft stay on q */

p:=mutable_point(2,3);
q:=p;
always q.x=10;
/* should have p=mutable_point(10,3), q=mutable_point(10,3) - p and q are
aliased after the assignment */
p := mutable_point(0,0);
/* now p and q are different points and we have p=mutable_point(0,0),
   q=mutable_point(10,3) */
 
/* example with an identity constraint */
p:=mutable_point(2,3);
q:=p;
always p==q; /* object identity */
p := mutable_point(0,0);
/* now p and q are both (0,0) and are still identical */


Rules for translating to Wallingford++

For the experiment we use different names for key macros, in particular
wally-define-symbolic and wally-set!  In some production version these
would be define-symbolic and set!.


Restriction: we need to declare the types of variables that hold instances
of primitives and value classes; they can't change type dynamically.

For variables that hold instances of primitives or value classes, declare
them using wally-define-symbolic or wally-define-symbolic*,
e.g. (define-symbolic p q point?)
We need to use this even with let or in other kinds of scopes.

For variables with ID, just declare these normally using declare or let.

Translations of the above programs:

(wally-define-symbolic x y number?)
(wally-set! x 3)
(wally-set! y x)
(always (equal? y 10))
/* should have x=3, y=10 */

(wally-define-symbolic p q point?)
(wally-set! p (point 2 3))
(wally-set! q p)
(always (equal? q p))
/* should have p=point(2,3), q=point(10,10) -- p and q are different
   objects */

(wally-define-symbolic p q point?)
(wally-set! p (point 2 3))
(wally-set! q p)
(always (equal? (point-x q) 10))
/* should have p=point(2,3), q=point(10,10) -- again p and q are different
   objects */

(define p (mutable-point 2 3))
(define q p)
(always (equal? (mutable-point-x q) 10))
/* should have p=(10,3) and q=(10,3) -- p and q are aliased */
   objects */

(define p (mutable-point 2 3))
(define q p)
(always (eq? q p))
(wally-set! p (mutable-point 0 0))
/* should have p=(0,0) and q=(0,0) -- p and q are aliased and now refer to
   the newly minted mutable point */




what about passing arguments (either with or without ID)?

Arguments are passed by value with pointer semantics (see the Step By
Step memo).  For objects with identity this works fine.

For value objects, if it's a concrete value, or if we don't constrain
it, this also works fine.  So a restriction: can't put constraints on
value parameters to functions.  You can assign to the parameter,
although it's not good style and doesn't propagate back.


mumble about  Rosette shell; dangers of this; assert just within a context
